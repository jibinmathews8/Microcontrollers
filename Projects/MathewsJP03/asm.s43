; Jibin Mathews
; ECE 3362 002
; Project 3
; Project uses a 7 segment display and buttons to start stop and reset incrementing values up to 4 digits


#include "msp430.h"                     
; Program uses MSP430 to make a timer with Pause/Reset functions (Follow Flowchart)

        NAME    main                    
        PUBLIC  main                             

; Control how fast to count
#define COUNT_DELAY     0x03

; Define labels to the memory locations that hold the values to display.
#define THOU            0x200
#define HUND            0x201
#define TENS            0x202
#define ONES            0x203

; Define each 7 Segment Display 
#define DIS1            0x01
#define DIS2            0x02
#define DIS3            0x04
#define DIS4            0x08
#define ALLD            0xF

;Define the delay between each segment
#define SEG_DELAY       0x6DC

        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label

;1.        
        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer
                
;2.   
      ; Set P1 as output
        MOV.B   #0xFF, &P1DIR
        
      ; Set pins to GPIO mode for P1
        MOV.B   #0x00, &P1SEL
        MOV.B   #0x00, &P1SEL2
        
      ; Set outputs for P2
        MOV.B   #00001111b, &P2DIR
        
      ; Set pins to GPIO mode for P2
        MOV.B   #0x00, &P2SEL
        MOV.B   #0x00, &P2SEL2
        
        
        
        
        
        
main:   NOP                             ; main program

;3.     
       ; Enable Pullup resistor
        MOV.B   #11100000b, &P2REN
        MOV.B   #11100000b, &P2OUT

;4.     
        ; Make sure all displays are off
        BIS.B   #0xF, &P2OUT
        
;5.     
        ; Set Output as zero
        MOV.B   &ZERO, &P1OUT 
;6.     
        ; Enable Displays
        BIC.B   #0x0F, &P2OUT
        
        ; Set values to zero for each display
        MOV.B   #0x00, &ONES
        MOV.B   #0x00, &TENS
        MOV.B   #0x00, &HUND
        MOV.B   #0x00, &THOU

        ; Initialize the counter delay value.
        MOV.W   #COUNT_DELAY, R5


; Loop to Display the counting 
displayLoop:
        ; Decrement to delay overall loop
        DEC.W   R5
        
        ; Jump if not zero to main portion of code (Keeps looping within loop)
        JNZ     inputLoop
        CALL    #doCount
        MOV.W   #COUNT_DELAY, R5        ; Reset the count back to the original value.



; Loop to see if button is pressed
inputLoop:
        BIT.B   #0x20, &P2IN            ; Set status flags for button
        JZ     Draw               ; Keeps Jumping if switch is not pressed
                                        
        
        ; Figure out how to Pause 
                                        
        MOV.B   ZERO(R4), &P1OUT        ; Change the number on the seven segment
        BIT.B   #0x20, &P2IN            ; Set status flags for button
        JNZ     Draw                    ; If the switch is not pressed jump to poll again
        MOV.B   ZERO(R4), &P1OUT                                


Draw:
       ; Ones    
        BIS.B   #ALLD, &P2OUT           ; Bit set to turn off all displays
        BIC.B   #DIS4, &P2OUT           ; Display 4 used for ones place
        MOV.B   &ONES, R4               ; Move values to display for ones segment
        MOV.B   ZERO(R4), &P1OUT        ; Pattern used from Look up table
        MOV.W   #SEG_DELAY, R4          ; Delay between each digit while displaying 
        CALL    #DelayMS                ; Add delay between transition of each segment
        
        ; Tens
        BIS.B   #ALLD, &P2OUT           
        BIC.B   #DIS3, &P2OUT           
        MOV.B   &TENS, R4               
        MOV.B   ZERO(R4), &P1OUT        
        MOV.W   #SEG_DELAY, R4          
        CALL    #DelayMS
        
        ; Hundreds
        BIS.B   #ALLD, &P2OUT           
        BIC.B   #DIS2, &P2OUT           
        MOV.B   &HUND, R4               
        MOV.B   ZERO(R4), &P1OUT        
        MOV.W   #SEG_DELAY, R4          
        CALL    #DelayMS                                
        
        ; Thousands
        BIS.B   #ALLD, &P2OUT           
        BIC.B   #DIS1, &P2OUT           
        MOV.B   &THOU, R4               
        MOV.B   ZERO(R4), &P1OUT               
        MOV.W   #SEG_DELAY, R4          
        CALL    #DelayMS                              
        
        JMP     displayLoop     
        

; Loop to do the actual counting 
doCount:
        
        INC.B   &ONES                  
        CMP.B   #0xA, &ONES                                
        JNZ      NI                      
        MOV.B   #0x0, &ONES             
      
        INC.B   &TENS                  
        CMP.B   #0xA, &TENS                                
        JNZ      NI                      
        MOV.B   #0x0, &TENS
        
        INC.B   &HUND                 
        CMP.B   #0xA, &HUND                                
        JNZ      NI                      
        MOV.B   #0x0, &HUND
        
        INC.B   &THOU                  
        CMP.B   #0xA, &THOU                               
        JNZ      NI                      
        MOV.B   #0x0, &THOU
NI:     RET

; Delay to prevent Ghosting
DelayMS:
        DEC     R4
        JNZ     DelayMS
        RET

; Lookup table        
ZERO:   DC8    ~0x3F
ONE:    DC8    ~0x06
TWO:    DC8    ~0x5B
THREE:  DC8    ~0x4F
FOUR:   DC8    ~0x66
FIVE:   DC8    ~0x6D
SIX:    DC8    ~0x7D
SEVEN:  DC8    ~0x07
EIGHT:  DC8    ~0x7F
NINE:   DC8    ~0x67

        END