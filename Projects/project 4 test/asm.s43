; Follow Flow Chart 

; 1. Start

#include "msp430.h"                     ; include file

        NAME    main                    ; module name
        PUBLIC  main                    ; external visibility of main label
    
; 2. Define Variables     
                                                
                ORG    0x300
ten_ms          DC8    0x300              ; 0x300 ten_ms value located here (0x300)
hund_ms         DC8    0x301              ; 0x301                      
seconds         DC8    0x302              ; .. 
ten_sec         DC8    0x303              ; ..
countm          DC8    0x304
PB1M            DC8    0x305              ; Start (Right Button)
PB2M            DC8    0x306              ; Pause (Center Button)
PB3M            DC8    0x307              ; Reset (Left Button)
CurrentDigit    DC8    0x308

; 3. Interrupts
ORG     0FFFEh
DC16    init                               ; reset vector to 'init'
ORG     0xFFE6
DC16    Port_2_ISR                         ; port 2 interrupt vector
ORG     0xFFF2
DC16    TA_0_ISR                           ; timer 0 interrupt vector
ORG     0xFFFA
DC16    TA_1_ISR                           ; timer 1 interrupt vector 
RSEG    CSTACK                             ; pre-declaration of segment
RSEG    CODE                               ; place program in 'CODE' segment

; I/O
#define DIS1    0x01
#define DIS2    0x02
#define DIS3    0x04
#define DIS4    0x08
#define ALLD    0xF
#define COLN    0x10

; Buttons
#define PB1     0x20     
#define PB2     0x80
#define PB3     0x40

; Timers (For Display and Count) Timer 0 has an issue (Look into it)
#define TA_0_count      50000
#define TA_1_count      1000
#define max_count       10                      ;There are 10 .1s Intervals in 1s
                

init:   MOV     #SFE(CSTACK), SP                ; Set up Stack (End of RAM)
        MOV.W   #WDTPW+WDTHOLD, &WDTCTL         ; Stop Watch Dog Timer
       
        MOV.B   #0xFF, &P1DIR                   ; Enable P1 output
        MOV.B   #ALLD+COLN, &P2DIR              ; lower 5 bits outputs (displays + colon)
        MOV.B   #PB1+PB2+PB3, &P2REN            ; Enable Pull up/ Pull down Resistor
        MOV.B   #PB1+PB2+PB3, &P2OUT            ; Set Up Pullup Resistor 

        BIS.B   #0xFF, &P1OUT                   ; clear character display (all off)
        BIS.B   #ALLD+COLN, &P2OUT              ; clear all displays and colon

        BIC.B   #0xFF, &P1SEL                   ; Set P1 GPIO Mode
        BIC.B   #0xFF, &P1SEL2          
        BIC.B   #0xFF, &P2SEL                   ; Set P2 GPIO mode
        BIC.B   #0xFF, &P2SEL2
        
        BIS.B   #PB1+PB2+PB3, &P2IE             ; P2 interrupt enabled for buttons
        BIS.B   #PB1+PB2+PB3, &P2IES
        CLR.B   &P2IFG                          ; Clear Interrupt 
        
        CLR.B   &DCOCTL;                        ; Setup calibrated 1 MHz clock
        MOV.B   &CALBC1_1MHZ, &BCSCTL1
        MOV.B   &CALDCO_1MHZ, &DCOCTL         
       
       
        MOV.W   #TA_0_count, &TA0CCR0           ; Setup Timer 0 and Interrupt
        MOV.W   #TASSEL_2+MC_1, &TACTL          ; Up mode
        MOV.W   #CCIE, &TA0CCTL0
        BIC.W   #TAIFG, &TA0CTL                 ; clear interrupt flag 
                
        MOV.W   #TA_1_count, &TA1CCR0           ; setup Timer 1 and interrupt
        MOV.W   #TASSEL_2+ID_1+MC_1, &TA1CTL    ; Up Mode
        MOV.W   #CCIE, &TA1CCTL0
        BIC.W   #TAIFG, &TA1CTL                 ; Clear Interrupt Flag

; 4. Clear Values         
        CLR.B   &ten_ms                         ; Clear all Variables
        CLR.B   &hund_ms
        CLR.B   &seconds
        CLR.B   &ten_sec
        CLR.B   &countm
        CLR.B   &PB1M
        CLR.B   &PB2M
        CLR.B   &PB3M
        CLR.B   &CurrentDigit
        EINT                                    ; Enable Interrupts

; 5. Main Program 
main:                                          
; 6. Wait for Button Press
; If Yes move to corresponding loop
; If no keep looping
        NOP                                     ; No Operation  
        
        BIC.B   #ALLD+COLN, &P1OUT
        CMP.B   #0x01, &PB1M                    ; Flag to check if Right Button pressed
        JEQ     PB1M_set                        ; If pressed jump to PB1M_set
        CMP.B   #0x01, &PB2M                    ; Flag to check if Middle Button is pressed                   
        JEQ     PB2M_set                        ; If pressed jump to PB2M_set
        CMP.B   #0x01, &PB3M                    ; Flag to check if Left Button is pressed
        JEQ     PB3M_set                        ; If pressed jump to PB3M_set
        JMP     Done
       
PB1M_set:                                       ; PB1M(Right Button) used to Start Count
        MOV.B   #0x1, &ten_ms           
        MOV.B   #0x2, &hund_ms          
        MOV.B   #0x3, &seconds          
        MOV.B   #0x4, &ten_sec
        CLR.B   &PB1M                           ; Reset flag for Right button press
        JMP     Done

PB2M_set:                                       ;PB2M(Center Button) used to Pause Count
        MOV.B   #0x5, &ten_ms           
        MOV.B   #0x6, &hund_ms
        MOV.B   #0x7, &seconds
        MOV.B   #0x8, &ten_sec
        CLR.B   &PB2M                           ; Reset flag for Middle button press
        JMP     Done
        
PB3M_set:                                       ; PB3M(Left Button) used to Reset Count                           
        MOV.B   #0x0, &ten_ms                   ; Change values to zero to reset
        MOV.B   #0x0, &hund_ms
        MOV.B   #0x0, &seconds
        MOV.B   #0x0, &ten_sec
        CLR.B   &PB3M                           ; Reset flag for Left button press          
        JMP     Done
        

Done:   JMP     main                            ; Repeats Main function (Wait for button press) once previous Instructions are done        

Draw:                                           ; Drawing Display (1 Digit at a time per interrupt)
        BIS.B   #ALLD, &P2OUT
       
        CMP.B   #0x0, &CurrentDigit             ; Compare which Digit to display
        JEQ     WriteDig1                       ; 1st Digit
        CMP.B   #0x1, &CurrentDigit
        JEQ     WriteDig2                       ; Second Digit
        CMP.B   #0x2, &CurrentDigit
        JEQ     WriteDig3                       ; Third Digit
        CMP.B   #0x3, &CurrentDigit
        JEQ     WriteDig4                       ; Fourth Digit
        
        
; Keeps looping while no Button is pressed
        
WriteDig1:                              ; Writing Digit One (Tens place)
        BIC.B   #DIS4, &P2OUT
        MOV.B   &ten_ms, R4
        MOV.B   ZERO(R4), &P1OUT
        JMP     DoneNow
        
WriteDig2:                              ; Writing Digit Two 
        BIC.B   #DIS3, &P2OUT
        MOV.B   &hund_ms, R4
        MOV.B   ZERO(R4), &P1OUT
        JMP     DoneNow
        
 WriteDig3:                              ; Writing Digit 3
        BIC.B   #DIS2, &P2OUT
        MOV.B   &seconds, R4
        MOV.B   ZERO(R4), &P1OUT
        JMP     DoneNow
        
WriteDig4:                              ; Writing Digit 4
        BIC.B   #DIS1, &P2OUT
        MOV.B   &ten_sec, R4
        MOV.B   ZERO(R4), &P1OUT
        JMP     DoneNow
        
DoneNow:                                ; Writing Complete
        INC.B   &CurrentDigit           
        CMP.B   #0x4, &CurrentDigit     ; Compare if Digits are displayed
        JL      DoneWriting             ; Skip Writing 
        CLR.B   &CurrentDigit           ; Reset Flag for current Digit
        XOR.B   #COLN, &P2OUT           ; Display Colon

DoneWriting:
        RET
        

Port_2_ISR:                             ; Push Buttons interrupt (P2 ports)
        BIT.B   #PB1, &P2IFG            ; Check which Button was pressed(Play,Pause,Reset)
        JNZ     PB1_set                 ; Jump depending on which button was pressed
        BIT.B   #PB2, &P2IFG
        JNZ     PB2_set
        BIT.B   #PB3, &P2IFG
        JNZ     PB3_set        
        
PB1_set:                                ; Flag for Play Button pushed (PB1)
        BIS.B   #0x01, &PB1M
        JMP     T0ISR_finish
PB2_set:                                ; Flag for Pause Button pushed (PB2)
        BIS.B   #0x01, &PB2M
        JMP     T0ISR_finish
PB3_set:                                ; Flag for Reset Button pushed (PB3)
        BIS.B   #0x01, &PB3M    
        JMP     T0ISR_finish

T0ISR_finish:                           ; Clear Flag( Interrupt Complete)
        CLR.B   &P2IFG 
        RETI                            ; Interrupt Return
        
        
TA_0_ISR:                               ; Interrupt TA_0
        CALL    #Draw                   ; Timer for Display (Draw and Display Each time)
        RETI                            ; Interrupt Return

TA_1_ISR:                               ; interrupt occured TA_1
        INC.B   &ten_ms                 ; timer updates every 0.1 s 
                                        ; likely need to do something here
                                        ; Timer that counts every 100ms 
      
        RETI
        
; 7 Segment Display Values

ZERO:   DC8    ~0x3F
ONE:    DC8    ~0x06
TWO:    DC8    ~0x5B
THREE:  DC8    ~0x4F
FOUR:   DC8    ~0x66
FIVE:   DC8    ~0x6D
SIX:    DC8    ~0x7D
SEVEN:  DC8    ~0x07
EIGHT:  DC8    ~0x7F
NINE:   DC8    ~0x67

END